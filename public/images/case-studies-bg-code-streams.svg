<svg width="1200" height="600" viewBox="0 0 1200 600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <!-- Code syntax gradients -->
    <linearGradient id="codeFlow1" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#dbeafe;stop-opacity:0" />
      <stop offset="30%" style="stop-color:#bfdbfe;stop-opacity:0.6" />
      <stop offset="70%" style="stop-color:#93c5fd;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#60a5fa;stop-opacity:0" />
    </linearGradient>
    
    <linearGradient id="codeFlow2" x1="0%" y1="100%" x2="100%" y2="0%">
      <stop offset="0%" style="stop-color:#ecfdf5;stop-opacity:0" />
      <stop offset="25%" style="stop-color:#d1fae5;stop-opacity:0.5" />
      <stop offset="75%" style="stop-color:#a7f3d0;stop-opacity:0.7" />
      <stop offset="100%" style="stop-color:#6ee7b7;stop-opacity:0" />
    </linearGradient>
    
    <linearGradient id="binaryFlow" x1="0%" y1="50%" x2="100%" y2="50%">
      <stop offset="0%" style="stop-color:#ffffff;stop-opacity:0" />
      <stop offset="20%" style="stop-color:#f8fafc;stop-opacity:0.4" />
      <stop offset="50%" style="stop-color:#e2e8f0;stop-opacity:0.6" />
      <stop offset="80%" style="stop-color:#cbd5e1;stop-opacity:0.4" />
      <stop offset="100%" style="stop-color:#94a3b8;stop-opacity:0" />
    </linearGradient>
  </defs>
  
  <!-- Flowing code streams -->
  <g opacity="0.7" font-family="'JetBrains Mono', 'Courier New', monospace" font-size="14" font-weight="400">
    <!-- JavaScript/React code stream -->
    <text x="-100" y="100" fill="url(#codeFlow1)">
      const ProjectCard = ({ title, tech, demo }) => {
      <animateMotion dur="25s" repeatCount="indefinite">
        <path d="M0,0 L1400,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.8;0.8;0" dur="25s" repeatCount="indefinite"/>
    </text>
    
    <text x="-200" y="130" fill="url(#codeFlow1)">
      return &lt;div className="card"&gt;{title}&lt;/div&gt;
      <animateMotion dur="25s" repeatCount="indefinite" begin="2s">
        <path d="M0,0 L1400,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.8;0.8;0" dur="25s" repeatCount="indefinite" begin="2s"/>
    </text>
    
    <text x="-150" y="160" fill="url(#codeFlow1)">
      }
      <animateMotion dur="25s" repeatCount="indefinite" begin="4s">
        <path d="M0,0 L1400,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.8;0.8;0" dur="25s" repeatCount="indefinite" begin="4s"/>
    </text>
    
    <!-- CSS/Styling code stream -->
    <text x="-180" y="250" fill="url(#codeFlow2)">
      .project-card { transform: scale(1.05); }
      <animateMotion dur="30s" repeatCount="indefinite" begin="1s">
        <path d="M0,0 L1400,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.7;0.7;0" dur="30s" repeatCount="indefinite" begin="1s"/>
    </text>
    
    <text x="-120" y="280" fill="url(#codeFlow2)">
      animation: fadeIn 0.8s ease-out;
      <animateMotion dur="30s" repeatCount="indefinite" begin="3s">
        <path d="M0,0 L1400,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.7;0.7;0" dur="30s" repeatCount="indefinite" begin="3s"/>
    </text>
    
    <!-- API/Backend code stream -->
    <text x="-250" y="400" fill="url(#codeFlow1)">
      fetch('/api/projects').then(res => res.json())
      <animateMotion dur="28s" repeatCount="indefinite" begin="0.5s">
        <path d="M0,0 L1400,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.8;0.8;0" dur="28s" repeatCount="indefinite" begin="0.5s"/>
    </text>
    
    <text x="-200" y="430" fill="url(#codeFlow1)">
      .then(data => setProjects(data))
      <animateMotion dur="28s" repeatCount="indefinite" begin="2.5s">
        <path d="M0,0 L1400,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.8;0.8;0" dur="28s" repeatCount="indefinite" begin="2.5s"/>
    </text>
    
    <!-- Function definitions -->
    <text x="-300" y="520" fill="url(#codeFlow2)">
      const handleProjectClick = (id) => navigate(`/project/${id}`)
      <animateMotion dur="32s" repeatCount="indefinite" begin="1.5s">
        <path d="M0,0 L1400,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.7;0.7;0" dur="32s" repeatCount="indefinite" begin="1.5s"/>
    </text>
  </g>
  
  <!-- Binary data streams -->
  <g opacity="0.4" font-family="'JetBrains Mono', 'Courier New', monospace" font-size="12" font-weight="300">
    <text x="-50" y="180" fill="url(#binaryFlow)">
      01001000 01100101 01101100 01101100 01101111
      <animateMotion dur="20s" repeatCount="indefinite">
        <path d="M0,0 L1300,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.6;0.6;0" dur="20s" repeatCount="indefinite"/>
    </text>
    
    <text x="-80" y="350" fill="url(#binaryFlow)">
      11010001 10110010 00101110 01001010 11010011
      <animateMotion dur="22s" repeatCount="indefinite" begin="1s">
        <path d="M0,0 L1300,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.6;0.6;0" dur="22s" repeatCount="indefinite" begin="1s"/>
    </text>
    
    <text x="-60" y="480" fill="url(#binaryFlow)">
      00100000 01010100 01111001 01110000 01100101
      <animateMotion dur="24s" repeatCount="indefinite" begin="0.5s">
        <path d="M0,0 L1300,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.6;0.6;0" dur="24s" repeatCount="indefinite" begin="0.5s"/>
    </text>
  </g>
  
  <!-- Floating code brackets and symbols -->
  <g opacity="0.5" font-family="'JetBrains Mono', 'Courier New', monospace" font-size="24" font-weight="bold">
    <text x="200" y="150" fill="rgba(147, 197, 253, 0.8)">{
      <animate attributeName="y" values="150;130;150" dur="8s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0.8;0.4;0.8" dur="6s" repeatCount="indefinite"/>
    </text>
    
    <text x="800" y="200" fill="rgba(147, 197, 253, 0.8)">}
      <animate attributeName="y" values="200;180;200" dur="10s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0.8;0.4;0.8" dur="7s" repeatCount="indefinite"/>
    </text>
    
    <text x="400" y="450" fill="rgba(167, 243, 208, 0.8)">&lt;/&gt;
      <animate attributeName="y" values="450;430;450" dur="7s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0.8;0.5;0.8" dur="5s" repeatCount="indefinite"/>
    </text>
    
    <text x="950" y="380" fill="rgba(147, 197, 253, 0.8)">=&gt;
      <animate attributeName="y" values="380;360;380" dur="9s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0.8;0.4;0.8" dur="6s" repeatCount="indefinite"/>
    </text>
    
    <text x="150" y="320" fill="rgba(167, 243, 208, 0.8)">( )
      <animate attributeName="y" values="320;300;320" dur="11s" repeatCount="indefinite"/>
      <animate attributeName="opacity" values="0.8;0.5;0.8" dur="8s" repeatCount="indefinite"/>
    </text>
  </g>
  
  <!-- Variable and function name streams -->
  <g opacity="0.6" font-family="'JetBrains Mono', 'Courier New', monospace" font-size="16" font-weight="500">
    <text x="-100" y="220" fill="rgba(96, 165, 250, 0.7)">
      useState, useEffect, useContext
      <animateMotion dur="35s" repeatCount="indefinite" begin="2s">
        <path d="M0,0 L1400,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.7;0.7;0" dur="35s" repeatCount="indefinite" begin="2s"/>
    </text>
    
    <text x="-150" y="350" fill="rgba(110, 231, 183, 0.7)">
      map, filter, reduce, forEach
      <animateMotion dur="33s" repeatCount="indefinite" begin="3s">
        <path d="M0,0 L1400,0"/>
      </animateMotion>
      <animate attributeName="opacity" values="0;0.7;0.7;0" dur="33s" repeatCount="indefinite" begin="3s"/>
    </text>
  </g>
</svg>