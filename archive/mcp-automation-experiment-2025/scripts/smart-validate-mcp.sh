#!/bin/bash

# Smart Quality Gates - MCP Integration  
# Intelligently selects between MCP validateQualityGatesMCP and hooks system

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/mcp-selection-engine.sh"

# =============================================================================
# SMART QUALITY GATES SELECTION
# =============================================================================

smart_quality_gates() {
    local checks="${1:-typescript,eslint,build}"
    local parallel="${2:-true}"
    local fail_fast="${3:-false}"
    
    echo "‚úÖ Smart Quality Gates - Phase 2 MCP Integration"
    echo "================================================"
    
    # Get optimal tool selection
    local selected_tool=$(select_optimal_tool "quality-gates")
    local environment=$(detect_environment)
    local mcp_available=$(check_mcp_server_availability)
    
    echo "üîç Environment: $environment"
    echo "ü§ñ MCP Available: $mcp_available"
    echo "üéØ Selected Tool: $selected_tool"
    echo "üîç Checks: $checks"
    echo ""
    
    case "$selected_tool" in
        "mcp")
            execute_mcp_quality_gates "$checks" "$parallel" "$fail_fast"
            ;;
        "hooks")
            execute_hooks_quality_gates "$checks" "$parallel" "$fail_fast"
            ;;
        *)
            log_error "Unknown tool selection: $selected_tool"
            exit 1
            ;;
    esac
}

# =============================================================================
# MCP QUALITY GATES EXECUTION
# =============================================================================

execute_mcp_quality_gates() {
    local checks="$1"
    local parallel="$2"
    local fail_fast="$3"
    
    log_info "ü§ñ Using MCP quality gates validation"
    
    # Convert comma-separated checks to array format for Claude
    local checks_array=$(echo "$checks" | sed 's/,/", "/g' | sed 's/^/["/' | sed 's/$/"]/')
    
    echo ""
    echo "üö® CLAUDE CODE: USE MCP TOOLS NOW"
    echo "üö® CLAUDE PROMPT: validateQualityGatesMCP({"
    echo "  checks: $checks_array,"
    echo "  parallel: $parallel,"
    echo "  failFast: $fail_fast,"
    echo "  timeout: 300000"
    echo "})"
    echo "üö® REASON: Comprehensive quality validation without bash timeout risks"
    echo ""
    echo "‚ö° **MCP Benefits**:"
    echo "- ‚úÖ Direct TypeScript compiler access (no npm script overhead)"
    echo "- ‚úÖ Parallel execution of quality checks"
    echo "- ‚úÖ Timeout-resistant validation with progress feedback"
    echo "- ‚úÖ Bundle size validation with detailed analysis"
    echo "- ‚úÖ Comprehensive error reporting with actionable guidance"
    echo ""
    echo "üí° **Alternative**: If MCP unavailable, will fallback to hooks system"
    
    # Show what checks will be performed
    echo ""
    echo "üìã **Quality Checks to be performed**:"
    IFS=',' read -ra CHECK_ARRAY <<< "$checks"
    for check in "${CHECK_ARRAY[@]}"; do
        case "$check" in
            "typescript")
                echo "- üî∑ TypeScript compilation validation"
                ;;
            "eslint")
                echo "- üîß ESLint code quality and style validation"
                ;;
            "build")
                echo "- üèóÔ∏è  Production build test"
                ;;
            "bundle")
                echo "- üì¶ Bundle size validation (<6MB budget)"
                ;;
            *)
                echo "- ‚ùì Unknown check: $check"
                ;;
        esac
    done
    
    # For demonstration, show expected execution flow
    if [[ "$DEMO_MCP_RESPONSE" == "true" ]]; then
        echo ""
        echo "üìã **Expected MCP Execution Flow**:"
        echo "1. ‚úÖ Project context validation"
        echo "2. ‚úÖ Quality check orchestration setup"
        if [[ "$parallel" == "true" ]]; then
            echo "3. ‚úÖ Parallel execution of selected checks"
        else
            echo "3. ‚úÖ Sequential execution of selected checks"
        fi
        echo "4. ‚úÖ Result aggregation and analysis"
        echo "5. ‚úÖ Comprehensive report with actionable recommendations"
    fi
    
    return 0
}

# =============================================================================
# HOOKS QUALITY GATES EXECUTION
# =============================================================================

execute_hooks_quality_gates() {
    local checks="$1"
    local parallel="$2"
    local fail_fast="$3"
    
    log_info "üîß Using hooks system quality gates"
    
    local exit_code=0
    
    # Parse checks and execute accordingly
    IFS=',' read -ra CHECK_ARRAY <<< "$checks"
    
    if [[ "$parallel" == "true" ]]; then
        execute_parallel_checks "${CHECK_ARRAY[@]}"
        exit_code=$?
    else
        execute_sequential_checks "$fail_fast" "${CHECK_ARRAY[@]}"
        exit_code=$?
    fi
    
    if [[ $exit_code -eq 0 ]]; then
        log_success "All quality gates passed!"
    else
        log_error "Quality gates failed"
    fi
    
    return $exit_code
}

execute_parallel_checks() {
    local checks=("$@")
    local pids=()
    local results=()
    
    echo "üîÑ Running quality checks in parallel..."
    
    # Start all checks in background
    for check in "${checks[@]}"; do
        (
            case "$check" in
                "typescript")
                    echo "üî∑ Running TypeScript validation..."
                    npm run typecheck
                    ;;
                "eslint")
                    echo "üîß Running ESLint validation..."
                    npm run lint
                    ;;
                "build")
                    echo "üèóÔ∏è  Running build validation..."
                    npm run build
                    ;;
                "bundle")
                    echo "üì¶ Running bundle size validation..."
                    if command -v bundlesize >/dev/null 2>&1; then
                        bundlesize
                    else
                        # Simple bundle size check
                        if [[ -d ".next" ]]; then
                            local size=$(du -sm .next 2>/dev/null | cut -f1)
                            if [[ $size -gt 6 ]]; then
                                echo "‚ùå Bundle size ${size}MB exceeds 6MB budget"
                                exit 1
                            else
                                echo "‚úÖ Bundle size ${size}MB within 6MB budget"
                            fi
                        else
                            echo "‚ö†Ô∏è  No build found, run 'npm run build' first"
                            exit 1
                        fi
                    fi
                    ;;
                *)
                    echo "‚ùì Unknown check: $check"
                    exit 1
                    ;;
            esac
        ) &
        pids+=($!)
    done
    
    # Wait for all checks to complete
    local overall_exit_code=0
    for i in "${!pids[@]}"; do
        local pid=${pids[$i]}
        local check=${checks[$i]}
        
        if wait $pid; then
            results+=("‚úÖ $check: PASSED")
        else
            results+=("‚ùå $check: FAILED")
            overall_exit_code=1
        fi
    done
    
    # Show results
    echo ""
    echo "üìä Quality Gates Results:"
    for result in "${results[@]}"; do
        echo "  $result"
    done
    
    return $overall_exit_code
}

execute_sequential_checks() {
    local fail_fast="$1"
    shift
    local checks=("$@")
    local exit_code=0
    
    echo "üîÑ Running quality checks sequentially..."
    
    for check in "${checks[@]}"; do
        echo ""
        echo "‚ñ∂Ô∏è  Running $check validation..."
        
        case "$check" in
            "typescript")
                if ! npm run typecheck; then
                    echo "‚ùå TypeScript validation failed"
                    exit_code=1
                    [[ "$fail_fast" == "true" ]] && return $exit_code
                fi
                ;;
            "eslint")
                if ! npm run lint; then
                    echo "‚ùå ESLint validation failed"
                    exit_code=1
                    [[ "$fail_fast" == "true" ]] && return $exit_code
                fi
                ;;
            "build")
                if ! npm run build; then
                    echo "‚ùå Build validation failed"
                    exit_code=1
                    [[ "$fail_fast" == "true" ]] && return $exit_code
                fi
                ;;
            "bundle")
                # Bundle size check (simplified)
                if [[ -d ".next" ]]; then
                    local size=$(du -sm .next 2>/dev/null | cut -f1)
                    if [[ $size -gt 6 ]]; then
                        echo "‚ùå Bundle size ${size}MB exceeds 6MB budget"
                        exit_code=1
                        [[ "$fail_fast" == "true" ]] && return $exit_code
                    else
                        echo "‚úÖ Bundle size ${size}MB within 6MB budget"
                    fi
                else
                    echo "‚ö†Ô∏è  No build found for bundle validation"
                fi
                ;;
            *)
                echo "‚ùì Unknown check: $check"
                exit_code=1
                [[ "$fail_fast" == "true" ]] && return $exit_code
                ;;
        esac
    done
    
    return $exit_code
}

# =============================================================================
# UTILITIES
# =============================================================================

show_available_checks() {
    echo "Available quality checks:"
    echo "  typescript    TypeScript compilation validation"
    echo "  eslint        ESLint code quality and style"
    echo "  build         Production build test"
    echo "  bundle        Bundle size validation (<6MB)"
}

show_usage() {
    echo "Smart Quality Gates - MCP Integration"
    echo ""
    echo "Usage: $0 [checks] [parallel] [fail_fast]"
    echo ""
    echo "Quality Checks:"
    show_available_checks
    echo ""
    echo "Options:"
    echo "  checks        Comma-separated list of checks (default: typescript,eslint,build)"
    echo "  parallel      Run checks in parallel (true/false, default: true)"
    echo "  fail_fast     Stop on first failure (true/false, default: false)"
    echo ""
    echo "Environment Variables:"
    echo "  USE_MCP=true              Force MCP tools"
    echo "  FORCE_HOOKS=true          Force hooks system"
    echo "  HYBRID_MODE=true          Use best tool for operation"
    echo "  MCP_FALLBACK=true         Enable hooks fallback (default)"
    echo "  DEMO_MCP_RESPONSE=true    Show example MCP execution flow"
    echo ""
    echo "Examples:"
    echo "  $0                        # Run default checks with smart selection"
    echo "  $0 typescript,eslint      # Run only TypeScript and ESLint"
    echo "  $0 typescript,eslint,build,bundle true false # All checks, parallel, no fail fast"
    echo "  USE_MCP=true $0           # Force MCP for quality gates"
    echo "  FORCE_HOOKS=true $0       # Force hooks system"
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

case "${1:-default}" in
    "default")
        smart_quality_gates "typescript,eslint,build" "true" "false"
        ;;
    "typescript"|"eslint"|"build"|"bundle"|*","*)
        smart_quality_gates "$1" "${2:-true}" "${3:-false}"
        ;;
    "checks"|"list")
        show_available_checks
        ;;
    "info")
        print_selection_info "quality-gates"
        ;;
    "help"|"--help"|"-h")
        show_usage
        ;;
    *)
        echo "Unknown command: $1"
        echo ""
        show_usage
        exit 1
        ;;
esac