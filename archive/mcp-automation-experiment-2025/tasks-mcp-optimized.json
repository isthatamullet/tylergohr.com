{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "MCP: Start Dev Server",
            "type": "shell",
            "command": "node",
            "args": ["mcp-server/dist/index.js", "startDevServerMCP", "--action=start", "--enhanced=true"],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared",
                "showReuseMessage": true,
                "clear": false
            },
            "options": {
                "env": {
                    "MCP_ENVIRONMENT": "auto",
                    "TIMEOUT_PREVENTION": "true",
                    "CLAUDE_AUTO_SUBAGENT": "true"
                }
            },
            "problemMatcher": [
                {
                    "owner": "mcp-server",
                    "fileLocation": ["relative", "${workspaceFolder}"],
                    "pattern": [
                        {
                            "regexp": "^‚ùå\\s+(.*):\\s+(.*)$",
                            "file": 1,
                            "message": 2,
                            "severity": "error"
                        }
                    ]
                }
            ],
            "background": {
                "activeOnStart": true,
                "beginsPattern": "^.*Starting.*development.*server.*",
                "endsPattern": "^.*Development server started successfully.*"
            },
            "runOptions": {
                "instanceLimit": 1,
                "reevaluateOnRerun": true,
                "runOn": "folderOpen"
            }
        },
        {
            "label": "MCP: Detect Active Port",
            "type": "shell",
            "command": "node",
            "args": ["mcp-server/dist/index.js", "detectActivePortMCP", "--includeHealth=true", "--scanPorts=true"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "env": {
                    "MCP_ENVIRONMENT": "auto"
                }
            }
        },
        {
            "label": "MCP: Execute Smoke Tests",
            "type": "shell",
            "command": "node",
            "args": ["mcp-server/dist/index.js", "executeTestMCP", "--testType=smoke", "--strategy=auto", "--fastMode=true"],
            "group": "test",
            "dependsOn": "MCP: Start Dev Server",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "env": {
                    "MCP_ENVIRONMENT": "auto",
                    "TIMEOUT_PREVENTION": "true"
                }
            },
            "problemMatcher": []
        },
        {
            "label": "MCP: Execute Development Tests",
            "type": "shell",
            "command": "node",
            "args": ["mcp-server/dist/index.js", "executeTestMCP", "--testType=dev", "--strategy=auto", "--skipVisual=true"],
            "group": "test",
            "dependsOn": "MCP: Start Dev Server",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "env": {
                    "MCP_ENVIRONMENT": "auto",
                    "TIMEOUT_PREVENTION": "true"
                }
            }
        },
        {
            "label": "MCP: Validate Quality Gates",
            "type": "shell",
            "command": "node",
            "args": ["mcp-server/dist/index.js", "validateQualityGatesMCP", "--checks=[\"typescript\",\"eslint\",\"build\"]"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "env": {
                    "MCP_ENVIRONMENT": "auto",
                    "TIMEOUT_PREVENTION": "true"
                }
            },
            "problemMatcher": [
                "$tsc",
                "$eslint-stylish"
            ]
        },
        {
            "label": "MCP: Monitor Performance",
            "type": "shell",
            "command": "node",
            "args": ["mcp-server/dist/index.js", "monitorPerformanceMCP", "--includeBundle=true", "--includeLighthouse=true"],
            "group": "test",
            "dependsOn": "MCP: Start Dev Server",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            }
        },
        {
            "label": "MCP: Check System Health",
            "type": "shell",
            "command": "node",
            "args": ["mcp-server/dist/index.js", "checkSystemHealthMCP", "--format=detailed", "--includeInsights=true"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            }
        },
        {
            "label": "Fallback: Traditional Dev Server (Port 3000)",
            "type": "shell",
            "command": "./scripts/mcp-enforcement-system.sh",
            "args": ["intercept", "npm", "run", "dev"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            },
            "options": {
                "env": {
                    "PORT": "3000",
                    "HOSTNAME": "0.0.0.0",
                    "ACTIVE_DEV_PORT": "3000",
                    "ACTIVE_DEV_URL": "${env:CLOUDWORKSTATIONS_REGION:+https://3000-tylergohr.cluster-${env:CLOUDWORKSTATIONS_REGION}.cloudworkstations.dev}${env:CODESPACE_NAME:+https://${env:CODESPACE_NAME}-3000.${env:GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN}}${env:GITPOD_WORKSPACE_URL:+https://3000-${env:GITPOD_WORKSPACE_URL#https://}}${env:CLOUDWORKSTATIONS_REGION:+}${env:CODESPACE_NAME:+}${env:GITPOD_WORKSPACE_URL:+}${env:CLOUDWORKSTATIONS_REGION:-}${env:CODESPACE_NAME:-}${env:GITPOD_WORKSPACE_URL:-http://localhost:3000}",
                    "CLAUDE_AUTO_SUBAGENT": "true",
                    "MCP_ENFORCEMENT_ACTIVE": "true"
                }
            },
            "background": {
                "activeOnStart": false,
                "beginsPattern": "^.*starting.*development.*server.*",
                "endsPattern": "^.*ready.*started.*server.*on.*http://localhost:3000.*"
            }
        },
        {
            "label": "Fallback: Traditional Smoke Tests",
            "type": "shell",
            "command": "./scripts/mcp-enforcement-system.sh",
            "args": ["intercept", "npm", "run", "test:e2e:smoke"],
            "group": "test",
            "dependsOn": "MCP: Start Dev Server",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            },
            "options": {
                "env": {
                    "CLAUDE_AUTO_SUBAGENT": "true",
                    "MCP_ENFORCEMENT_ACTIVE": "true"
                }
            }
        },
        {
            "label": "Development Workflow: Quick Iteration",
            "dependsOrder": "sequence",
            "dependsOn": [
                "MCP: Start Dev Server",
                "MCP: Execute Smoke Tests"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true
            }
        },
        {
            "label": "Quality Assurance: Complete Validation",
            "dependsOrder": "sequence",
            "dependsOn": [
                "MCP: Validate Quality Gates",
                "MCP: Execute Development Tests",
                "MCP: Monitor Performance"
            ],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true
            }
        },
        {
            "label": "Emergency: System Health Check",
            "dependsOrder": "sequence",
            "dependsOn": [
                "MCP: Check System Health",
                "MCP: Detect Active Port"
            ],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true
            }
        }
    ]
}