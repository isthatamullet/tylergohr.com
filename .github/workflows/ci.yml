# Tyler Gohr Portfolio - Simple PR Quality Gates
# Fast feedback pipeline based on working deployment pipeline patterns

name: 'CI - Quality Gates & Validation'

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:

# Concurrency control to cancel in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal permissions
permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Essential Quality Gates (Based on Working Deploy Pipeline)
  quality-gates:
    name: 'Quality Gates & Build Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Run Quality Gates'
        run: |
          npm run typecheck
          npm run lint
          npm run build

      - name: 'Bundle Size Check'
        run: |
          if [ -d ".next/static" ]; then
            bundle_size=$(du -sk .next/static | cut -f1)
            echo "Bundle size: ${bundle_size}KB"
            
            # Check bundle size budget (1MB limit)
            if [ $bundle_size -gt 1024 ]; then
              echo "❌ Bundle size exceeds budget: ${bundle_size}KB > 1MB"
              exit 1
            else
              echo "✅ Bundle size within budget: ${bundle_size}KB"
            fi
          fi

  # Job 2: Optional Testing (If Tests Exist)
  testing:
    name: 'Testing Suite'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-gates
    continue-on-error: true

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Run Tests'
        run: |
          npm run test -- --coverage --watchAll=false --passWithNoTests

  # Job 3: PR Summary
  summary:
    name: 'PR Summary'
    runs-on: ubuntu-latest
    if: always()
    needs: [quality-gates, testing]

    steps:
      - name: 'Generate PR Summary'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🚀 PR Quality Gates Results
            
            ### ✅ Essential Quality Gates
            - **TypeScript**: ${{ needs.quality-gates.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - **ESLint**: ${{ needs.quality-gates.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - **Build**: ${{ needs.quality-gates.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - **Bundle Size**: ${{ needs.quality-gates.result == 'success' && '✅ Within Budget' || '⚠️ Check Required' }}
            
            ### 🧪 Testing Results
            - **Unit Tests**: ${{ needs.testing.result == 'success' && '✅ Passed' || needs.testing.result == 'failure' && '❌ Failed' || '⚠️ Skipped' }}
            
            ---
            
            **Status**: ${{ needs.quality-gates.result == 'success' && '🎉 Ready for Review' || '⚠️ Requires Attention' }}
            
            *This PR follows the professional development workflow from Issue #6*
            `;
            
            // Find existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Quality Gates Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }