# Tyler Gohr Portfolio - Continuous Integration Pipeline
# Comprehensive PR validation with quality gates and performance testing

name: 'CI - Quality Gates & Validation'

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      skip_cache:
        description: 'Skip dependency cache'
        required: false
        default: false
        type: boolean

# Concurrency control to cancel in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Default permissions (minimal security)
permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality Validation
  quality:
    name: 'Code Quality & Standards'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |
          if [[ "${{ github.event.inputs.skip_cache }}" == "true" ]]; then
            npm ci --cache .npm --prefer-offline
          else
            npm ci
          fi

      - name: 'TypeScript Type Checking'
        run: npm run typecheck

      - name: 'ESLint Code Analysis'
        run: npm run lint

      - name: 'Prettier Format Check'
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,css,json}"

      - name: 'Security Audit'
        run: npm audit --audit-level moderate

      - name: 'License Compliance Check'
        run: npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'
        continue-on-error: true

  # Job 2: Build & Bundle Analysis
  build:
    name: 'Build Validation & Analysis'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality

    outputs:
      bundle-size: ${{ steps.bundle-analysis.outputs.bundle-size }}
      build-time: ${{ steps.build-timer.outputs.build-time }}

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Build Application'
        id: build-timer
        run: |
          start_time=$(date +%s)
          npm run build
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "build-time=${build_time}" >> $GITHUB_OUTPUT
          echo "Build completed in ${build_time} seconds"

      - name: 'Bundle Size Analysis'
        id: bundle-analysis
        run: |
          # Calculate bundle sizes
          if [ -d ".next/static" ]; then
            bundle_size=$(du -sk .next/static | cut -f1)
            echo "bundle-size=${bundle_size}" >> $GITHUB_OUTPUT
            echo "Bundle size: ${bundle_size}KB"
            
            # Check bundle size budget (150KB limit)
            if [ $bundle_size -gt 150 ]; then
              echo "❌ Bundle size exceeds budget: ${bundle_size}KB > 150KB"
              exit 1
            else
              echo "✅ Bundle size within budget: ${bundle_size}KB"
            fi
          fi

      - name: 'Upload Build Artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: next-build-${{ github.sha }}
          path: |
            .next/
            !.next/cache
          retention-days: 7

  # Job 3: Testing Suite
  test:
    name: 'Testing & Coverage'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Jest Unit & Component Tests'
        run: |
          echo "🧪 Running Jest unit and component tests..."
          npm run test -- --coverage --watchAll=false --passWithNoTests

      - name: 'Accessibility Tests with Axe'
        run: |
          echo "♿ Running accessibility compliance tests..."
          npm run test -- --testPathPattern=accessibility --watchAll=false

      - name: 'Upload Test Coverage'
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-${{ github.sha }}
          path: coverage/
          retention-days: 30

  # Job 4: E2E Testing with Playwright
  e2e:
    name: 'E2E Testing & Cross-Browser'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality, build]

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Install Playwright Browsers'
        run: npx playwright install --with-deps

      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: next-build-${{ github.sha }}
          path: .next/

      - name: 'Run Playwright E2E Tests'
        run: npm run test:e2e
        env:
          CI: true

      - name: 'Upload Playwright Report'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.sha }}
          path: playwright-report/
          retention-days: 30

      - name: 'Upload Test Screenshots'
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots-${{ github.sha }}
          path: test-results/
          retention-days: 30

  # Job 5: Docker Build Validation
  docker:
    name: 'Docker Build & Security'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality, build, e2e]

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build Docker Image'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 'Docker Security Scan'
        uses: docker/scout-action@v1
        if: github.event_name == 'pull_request'
        with:
          command: cves
          image: ${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
          only-severities: critical,high
          exit-code: true
        continue-on-error: true

      - name: 'Container Structure Test'
        run: |
          # Install container-structure-test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
          # Create basic test configuration
          cat > container-structure-test.yaml << 'EOF'
          schemaVersion: '2.0.0'
          commandTests:
            - name: "Node.js version check"
              command: "node"
              args: ["--version"]
              expectedOutput: ["v18.*"]
          fileExistenceTests:
            - name: "Server.js exists"
              path: "/app/server.js"
              shouldExist: true
            - name: "Health check accessible"
              path: "/app/.next"
              shouldExist: true
          metadataTest:
            exposedPorts: ["3000"]
            user: "nextjs"
          EOF
          
          # Run structure tests
          container-structure-test test --image ${{ env.IMAGE_NAME }}:pr-${{ github.event.number }} --config container-structure-test.yaml

  # Job 5: Performance Testing
  performance:
    name: 'Performance & Lighthouse'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: next-build-${{ github.sha }}
          path: .next/

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Start Application'
        run: |
          npm start &
          sleep 10
          echo "Application started on port 3000"

      - name: 'Lighthouse CI'
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: 'Performance Budget Check'
        run: |
          echo "🚀 Performance validation completed"
          echo "Target metrics: LCP <2.5s, INP <200ms, CLS <0.1"

  # Job 6: Summary & Reporting
  summary:
    name: 'PR Summary & Report'
    runs-on: ubuntu-latest
    if: always()
    needs: [quality, build, test, e2e, docker, performance]

    steps:
      - name: 'Generate PR Summary'
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            const buildTime = '${{ needs.build.outputs.build-time }}';
            const bundleSize = '${{ needs.build.outputs.bundle-size }}';
            
            const summary = `## 🚀 CI/CD Pipeline Results
            
            ### ✅ Quality Gates
            - **TypeScript**: ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - **ESLint**: ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - **Security Audit**: ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }}
            
            ### 📦 Build Analysis
            - **Build Time**: ${buildTime}s
            - **Bundle Size**: ${bundleSize}KB (Budget: 150KB)
            - **Docker Build**: ${{ needs.docker.result == 'success' && '✅ Passed' || '❌ Failed' }}
            
            ### 🧪 Testing Results
            - **Unit Tests**: ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - **Performance**: ${{ needs.performance.result == 'success' && '✅ Passed' || '❌ Failed' }}
            
            ### 🔒 Security
            - **Container Scan**: ${{ needs.docker.result == 'success' && '✅ No Critical Issues' || '⚠️ Check Required' }}
            - **Dependency Audit**: ${{ needs.quality.result == 'success' && '✅ Clean' || '⚠️ Issues Found' }}
            
            ---
            
            **Status**: ${{ job.status == 'success' && '🎉 Ready for Review' || '⚠️ Requires Attention' }}
            `;
            
            // Find existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('CI/CD Pipeline Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }