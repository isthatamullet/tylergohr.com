# Tyler Gohr Portfolio - Staging Deployment
# Manual deployment to staging environment for PR preview testing

name: 'Staging - Deploy PR for Preview'

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch or PR to deploy to staging'
        required: true
        default: 'feature/top-navigation'
        type: string
      pr_number:
        description: 'PR number (optional, for documentation)'
        required: false
        type: string

# No concurrency control - allow multiple staging deployments
permissions:
  contents: read
  id-token: write
  pull-requests: write

env:
  NODE_VERSION: '18'
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: tylergohr-portfolio-staging
  REGION: us-central1
  REGISTRY: gcr.io

jobs:
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: staging

    outputs:
      staging-url: ${{ steps.deploy.outputs.staging-url }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: 'Checkout Specified Branch'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 2

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Generate Staging Version'
        id: version
        run: |
          BRANCH_CLEAN=$(echo "${{ github.event.inputs.branch }}" | sed 's/[^a-zA-Z0-9]/-/g')
          VERSION="staging-$(date +%Y%m%d-%H%M%S)-${BRANCH_CLEAN}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated staging version: ${VERSION}"

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Run Quality Gates'
        run: |
          npm run typecheck
          npm run lint
          npm run build

      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 'Configure Docker for GCR'
        run: gcloud auth configure-docker

      - name: 'Setup Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build and Push Staging Container'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1

      - name: 'Deploy to Cloud Run Staging'
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ steps.version.outputs.version }}
          flags: |
            --port=3000
            --memory=1Gi
            --cpu=0.5
            --min-instances=0
            --max-instances=3
            --concurrency=50
            --timeout=300
            --allow-unauthenticated
            --set-env-vars="NODE_ENV=production,NEXT_TELEMETRY_DISABLED=1"
          tag: ${{ steps.version.outputs.version }}

      - name: 'Get Staging URL'
        id: get-url
        run: |
          # Get the staging URL from gcloud
          STAGING_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "staging-url=${STAGING_URL}" >> $GITHUB_OUTPUT
          echo "Staging URL: ${STAGING_URL}"

      - name: 'Wait for Service Readiness'
        run: |
          echo "‚è≥ Waiting for staging service to be ready..."
          sleep 15

      - name: 'Health Check Staging'
        run: |
          STAGING_URL="${{ steps.get-url.outputs.staging-url }}"
          HEALTH_URL="${STAGING_URL}/api/health"
          
          echo "üß™ Testing staging health endpoint: ${HEALTH_URL}"
          
          for i in {1..5}; do
            if curl -sSf "${HEALTH_URL}" > /dev/null; then
              echo "‚úÖ Staging health check passed (attempt ${i})"
              curl -s "${HEALTH_URL}" | jq . || echo "Health response received"
              break
            else
              echo "‚è≥ Health check attempt ${i} failed, retrying..."
              if [ $i -eq 5 ]; then
                echo "‚ö†Ô∏è  Health checks failed, but staging may still be accessible"
              fi
              sleep 10
            fi
          done

  notify:
    name: 'Staging Deployment Notification'
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always()

    steps:
      - name: 'Comment on PR (if PR number provided)'
        if: github.event.inputs.pr_number != ''
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentStatus = '${{ needs.deploy-staging.result }}' === 'success' ? '‚úÖ Successful' : '‚ùå Failed';
            const stagingUrl = '${{ needs.deploy-staging.outputs.staging-url }}';
            const version = '${{ needs.deploy-staging.outputs.version }}';
            const branch = '${{ github.event.inputs.branch }}';
            
            const comment = `## üöÄ Staging Deployment ${deploymentStatus}
            
            **Branch**: \`${branch}\`
            **Version**: \`${version}\`
            **Status**: ${deploymentStatus}
            
            ${deploymentStatus.includes('‚úÖ') ? 
              `### üåê Preview URLs
              - **Staging Site**: ${stagingUrl}
              - **Health Check**: ${stagingUrl}/api/health
              
              ### üß™ Testing Guide
              1. Click the staging URL above to preview changes
              2. Test the top navigation feature
              3. Verify responsive mobile menu
              4. Check all section links work properly
              
              üí° This staging deployment will remain active for testing. Delete when no longer needed.` 
              : 
              '‚ö†Ô∏è Deployment failed. Check the workflow logs for details.'
            }
            
            ---
            *Staging deployment triggered by workflow*`;
            
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.inputs.pr_number }},
                body: comment
              });
            } catch (error) {
              console.log('Could not comment on PR:', error.message);
            }

      - name: 'Deployment Summary'
        run: |
          echo "## üöÄ Staging Deployment Summary"
          echo ""
          echo "**Branch**: ${{ github.event.inputs.branch }}"
          echo "**Status**: ${{ needs.deploy-staging.result == 'success' && '‚úÖ Successful' || '‚ùå Failed' }}"
          echo "**Version**: ${{ needs.deploy-staging.outputs.version }}"
          echo ""
          if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "üåê **Staging URL**: ${{ needs.deploy-staging.outputs.staging-url }}"
            echo ""
            echo "### Next Steps:"
            echo "1. Open staging URL in browser"
            echo "2. Test navigation functionality"
            echo "3. Verify all features work as expected"
            echo "4. If satisfied, proceed with production deployment"
            echo ""
            echo "### Cleanup:"
            echo "```bash"
            echo "# Delete staging service when done testing"
            echo "gcloud run services delete ${{ env.SERVICE_NAME }} --region=${{ env.REGION }}"
            echo "```"
          else
            echo "‚ùå Deployment failed. Check workflow logs for details."
          fi