# Tyler Gohr Portfolio - Production Deployment Pipeline
# Automated deployment to Google Cloud Run with health checks and rollback capability

name: 'Deploy - Production Pipeline'

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      pipeline_strategy:
        description: 'Pipeline strategy override'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - fast-track
          - full-pipeline
      force_deploy:
        description: 'Force deployment (skip health checks)'
        required: false
        default: false
        type: boolean

# Concurrency control for deployments
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

# Minimal required permissions
permissions:
  contents: read
  id-token: write
  pull-requests: write

env:
  NODE_VERSION: '18'
  REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: tylergohr-portfolio
  REGION: us-central1

# Smart pipeline optimization based on change types
# Fast-track: content, styling, docs (2-3 min)
# Full pipeline: code, dependencies, infrastructure (8-12 min)

jobs:
  # Job 1: Change Detection & Strategy
  detect-changes:
    name: 'Pipeline Strategy Detection'
    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    outputs:
      fast-track: ${{ steps.changes.outputs.fast-track }}
      full-pipeline: ${{ steps.changes.outputs.full-pipeline }}
      manual-override: ${{ steps.changes.outputs.manual-override }}
      
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: 'Detect Change Strategy'
        id: changes
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          # Check for manual override via workflow dispatch
          MANUAL_STRATEGY="${{ github.event.inputs.pipeline_strategy }}"
          
          if [[ "$MANUAL_STRATEGY" == "full-pipeline" ]]; then
            echo "🔄 Manual override: forcing full pipeline"
            echo "fast-track=false" >> $GITHUB_OUTPUT
            echo "full-pipeline=true" >> $GITHUB_OUTPUT
            echo "manual-override=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "$MANUAL_STRATEGY" == "fast-track" ]]; then
            echo "⚡ Manual override: forcing fast-track"
            echo "fast-track=true" >> $GITHUB_OUTPUT
            echo "full-pipeline=false" >> $GITHUB_OUTPUT
            echo "manual-override=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for commit message overrides (secure: using env var instead of direct interpolation)
          
          if [[ "$COMMIT_MSG" == *"[full-pipeline]"* ]]; then
            echo "🔄 Commit message override: forcing full pipeline"
            echo "fast-track=false" >> $GITHUB_OUTPUT
            echo "full-pipeline=true" >> $GITHUB_OUTPUT
            echo "manual-override=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "$COMMIT_MSG" == *"[fast-track]"* ]]; then
            echo "⚡ Commit message override: forcing fast-track"
            echo "fast-track=true" >> $GITHUB_OUTPUT
            echo "full-pipeline=false" >> $GITHUB_OUTPUT
            echo "manual-override=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          echo "Changed files: $CHANGED_FILES"
          
          # Check for code/infrastructure changes requiring full pipeline
          FULL_PIPELINE_PATTERNS=(
            "src/"
            "pages/"
            "components/"
            "package.json"
            "package-lock.json"
            "Dockerfile"
            "next.config.js"
            "tsconfig.json"
            ".github/workflows/"
            "jest.config.js"
          )
          
          NEEDS_FULL_PIPELINE=false
          for pattern in "${FULL_PIPELINE_PATTERNS[@]}"; do
            if echo "$CHANGED_FILES" | grep -q "$pattern"; then
              echo "🚨 Found changes in $pattern - requires full pipeline"
              NEEDS_FULL_PIPELINE=true
              break
            fi
          done
          
          if [ "$NEEDS_FULL_PIPELINE" = "true" ]; then
            echo "full-pipeline=true" >> $GITHUB_OUTPUT
            echo "fast-track=false" >> $GITHUB_OUTPUT
          else
            echo "⚡ Only safe changes detected - using fast-track"
            echo "fast-track=true" >> $GITHUB_OUTPUT
            echo "full-pipeline=false" >> $GITHUB_OUTPUT
          fi
          
          echo "manual-override=false" >> $GITHUB_OUTPUT

  # Job 2: Pre-deployment validation
  validate:
    name: 'Pre-deployment Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.env.outputs.environment }}

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Run Quality Gates'
        run: |
          npm run typecheck
          npm run lint
          npm run build

      - name: 'Generate Version'
        id: version
        run: |
          VERSION=v$(date +%Y%m%d)-${GITHUB_SHA::7}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: 'Determine Environment'
        id: env
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "Deployment environment: ${ENVIRONMENT}"

  # Job 2: Build and push container
  build:
    name: 'Build & Push Container'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [detect-changes, validate]
    if: needs.detect-changes.outputs.full-pipeline == 'true'

    outputs:
      image-digest: ${{ steps.build.outputs.image-digest }}

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 'Configure Docker for GCR'
        run: gcloud auth configure-docker

      - name: 'Setup Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build and Push Container'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ needs.validate.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1


  # Job 3A: Fast-Track Deployment (no new container build)
  deploy-fast:
    name: 'Fast-Track Deploy'
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [detect-changes, validate]
    if: needs.detect-changes.outputs.fast-track == 'true'

    outputs:
      service-url: ${{ steps.get-url.outputs.service-url }}
      revision: ${{ steps.get-url.outputs.revision }}

    steps:
      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 'Setup Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Deploy with Latest Container'
        id: deploy
        run: |
          echo "⚡ Fast-track deployment using existing container image"
          
          # Get the latest successful image
          LATEST_IMAGE="${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest"
          
          # Deploy to Cloud Run with existing image
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image="${LATEST_IMAGE}" \
            --region=${{ env.REGION }} \
            --port=3000 \
            --memory=2Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --concurrency=100 \
            --timeout=300 \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production,NEXT_TELEMETRY_DISABLED=1" \
            --tag=${{ needs.validate.outputs.version }} \
            --traffic=100
          
          echo "✅ Fast-track deployment completed"

      - name: 'Get Service URL and Set Outputs'
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "service-url=${SERVICE_URL}" >> $GITHUB_OUTPUT
          echo "Fast-track deployed service URL: ${SERVICE_URL}"
          
          REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.latestCreatedRevisionName)")
          
          echo "revision=${REVISION}" >> $GITHUB_OUTPUT
          echo "Fast-track deployed revision: ${REVISION}"

  # Job 3B: Full Pipeline Deployment (with new container)
  deploy:
    name: 'Full Pipeline Deploy'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [detect-changes, validate, build]
    if: needs.detect-changes.outputs.full-pipeline == 'true' && needs.build.result == 'success'
    environment: ${{ needs.validate.outputs.environment }}

    outputs:
      service-url: ${{ steps.get-url.outputs.service-url }}
      revision: ${{ steps.get-url.outputs.revision }}

    steps:
      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 'Setup Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Deploy to Cloud Run'
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ needs.validate.outputs.version }}
          flags: |
            --port=3000
            --memory=2Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --concurrency=100
            --timeout=300
            --allow-unauthenticated
            --set-env-vars="NODE_ENV=production,NEXT_TELEMETRY_DISABLED=1"
          tag: ${{ needs.validate.outputs.version }}

      - name: 'Configure Traffic Allocation'
        run: |
          # Ensure new revision gets 100% traffic immediately
          REVISION="${{ steps.deploy.outputs.revision }}"
          
          # Fallback: get the latest revision if deploy output is empty
          if [ -z "${REVISION}" ]; then
            echo "⚠️ Deploy action didn't provide revision, getting latest revision..."
            REVISION=$(gcloud run revisions list \
              --service=${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --format="value(metadata.name)" \
              --sort-by="~metadata.creationTimestamp" \
              --limit=1)
            echo "📍 Found latest revision: ${REVISION}"
          fi
          
          if [ -n "${REVISION}" ]; then
            echo "🚀 Allocating 100% traffic to revision: ${REVISION}"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions="${REVISION}=100"
            echo "✅ Traffic allocation completed successfully"
            
            # Verify traffic allocation
            echo "🔍 Verifying traffic allocation..."
            gcloud run services describe ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --format="table(status.traffic[].revisionName,status.traffic[].percent)"
          else
            echo "❌ Could not determine revision for traffic allocation"
            exit 1
          fi

      - name: 'Get Service URL and Set Outputs'
        id: get-url
        run: |
          # Get the service URL from gcloud (more reliable than action outputs)
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "service-url=${SERVICE_URL}" >> $GITHUB_OUTPUT
          echo "Deployed service URL: ${SERVICE_URL}"
          
          # Also try to get revision from action output, fallback to latest
          REVISION="${{ steps.deploy.outputs.revision }}"
          if [ -z "${REVISION}" ]; then
            REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --format="value(status.latestCreatedRevisionName)")
          fi
          
          echo "revision=${REVISION}" >> $GITHUB_OUTPUT
          echo "Deployed revision: ${REVISION}"

  # Job 4: Health checks and validation
  health-check:
    name: 'Health Check & Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [detect-changes, validate, build, deploy, deploy-fast]
    if: always() && (needs.deploy.result == 'success' || needs.deploy-fast.result == 'success')

    steps:
      - name: 'Wait for Service Availability'
        run: sleep 30

      - name: 'Health Check - API Endpoint'
        id: health-api
        run: |
          # Get service URL from whichever deployment ran
          if [ "${{ needs.deploy-fast.result }}" = "success" ]; then
            SERVICE_URL="${{ needs.deploy-fast.outputs.service-url }}"
            echo "⚡ Using fast-track deployment URL"
          else
            SERVICE_URL="${{ needs.deploy.outputs.service-url }}"
            echo "🔄 Using full pipeline deployment URL"
          fi
          
          HEALTH_URL="${SERVICE_URL}/api/health"
          echo "Testing health endpoint: ${HEALTH_URL}"
          
          for i in {1..5}; do
            if curl -sSf "${HEALTH_URL}" > /dev/null; then
              echo "✅ Health check passed (attempt ${i})"
              curl -s "${HEALTH_URL}" | jq .
              break
            else
              echo "❌ Health check failed (attempt ${i})"
              if [ $i -eq 5 ]; then
                echo "Health checks failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: 'Performance Validation'
        run: |
          # Get service URL from whichever deployment ran
          if [ "${{ needs.deploy-fast.result }}" = "success" ]; then
            SERVICE_URL="${{ needs.deploy-fast.outputs.service-url }}"
          else
            SERVICE_URL="${{ needs.deploy.outputs.service-url }}"
          fi
          echo "Running performance validation on: ${SERVICE_URL}"
          
          # Test response time
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "${SERVICE_URL}")
          echo "Response time: ${RESPONSE_TIME}s"
          
          # Validate response time < 3s
          if (( $(echo "${RESPONSE_TIME} < 3.0" | bc -l) )); then
            echo "✅ Performance check passed"
          else
            echo "❌ Performance check failed: ${RESPONSE_TIME}s > 3s"
            exit 1
          fi

      - name: 'Security Headers Check'
        run: |
          # Get service URL from whichever deployment ran
          if [ "${{ needs.deploy-fast.result }}" = "success" ]; then
            SERVICE_URL="${{ needs.deploy-fast.outputs.service-url }}"
          else
            SERVICE_URL="${{ needs.deploy.outputs.service-url }}"
          fi
          echo "Validating security headers..."
          
          HEADERS=$(curl -sI "${SERVICE_URL}")
          
          # Check required security headers (case-insensitive)
          if echo "${HEADERS}" | grep -qi "x-content-type-options: nosniff"; then
            echo "✅ X-Content-Type-Options header present"
          else
            echo "❌ Missing X-Content-Type-Options header"
            echo "Available headers:"
            echo "${HEADERS}"
            exit 1
          fi
          
          if echo "${HEADERS}" | grep -qi "x-frame-options: deny"; then
            echo "✅ X-Frame-Options header present"
          else
            echo "❌ Missing X-Frame-Options header"
            echo "Available headers:"
            echo "${HEADERS}"
            exit 1
          fi

  # Job 5: Traffic migration (now simplified - main allocation handled in deploy step)
  traffic-migration:
    name: 'Traffic Migration'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [detect-changes, validate, deploy, health-check]
    if: needs.detect-changes.outputs.full-pipeline == 'true' && needs.deploy.result == 'success'

    steps:
      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 'Setup Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Verify Traffic Allocation'
        run: |
          REVISION="${{ needs.deploy.outputs.revision }}"
          
          echo "🔍 Verifying traffic allocation for revision: ${REVISION}"
          
          # Check current traffic allocation
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="table(status.traffic[].revisionName,status.traffic[].percent)"
          
          # Ensure this revision has 100% traffic (failsafe)
          echo "🚀 Ensuring 100% traffic allocation..."
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --to-revisions="${REVISION}=100"
          
          echo "✅ Traffic verification and allocation completed"

      - name: 'Final Health Check'
        run: |
          SERVICE_URL="${{ needs.deploy.outputs.service-url }}"
          
          # Wait for traffic to stabilize
          sleep 30
          
          # Final health check
          if curl -sSf "${SERVICE_URL}/api/health" > /dev/null; then
            echo "✅ Final health check passed"
            curl -s "${SERVICE_URL}/api/health" | jq .
          else
            echo "❌ Final health check failed - initiating rollback"
            exit 1
          fi

  # Job 6: Cleanup and notification
  cleanup:
    name: 'Cleanup & Notification'
    runs-on: ubuntu-latest
    if: always() && (needs.deploy.result == 'success' || needs.deploy-fast.result == 'success')
    needs: [detect-changes, validate, build, deploy, deploy-fast, health-check, traffic-migration]

    steps:
      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
        if: needs.deploy.result == 'success' || needs.deploy-fast.result == 'success'

      - name: 'Setup Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2
        if: needs.deploy.result == 'success' || needs.deploy-fast.result == 'success'

      - name: 'Cleanup Old Revisions'
        run: |
          # Keep only the 5 most recent revisions, but skip actively serving ones
          echo "🧹 Cleaning up old revisions (keeping 5 most recent)..."
          
          # Get currently serving revisions to avoid deleting them
          SERVING_REVISIONS=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.traffic[].revisionName)" | tr ',' '\n' | sort | uniq)
          
          echo "🚦 Currently serving revisions:"
          echo "${SERVING_REVISIONS}"
          
          # Get old revisions to delete (beyond the 5 most recent)
          gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(metadata.name)" \
            --sort-by="~metadata.creationTimestamp" \
            --limit=100 | tail -n +6 | while read revision; do
              
              # Check if this revision is actively serving traffic
              if echo "${SERVING_REVISIONS}" | grep -q "^${revision}$"; then
                echo "⚠️  Skipping actively serving revision: ${revision}"
              else
                echo "🗑️  Deleting old revision: ${revision}"
                if gcloud run revisions delete "${revision}" \
                  --region=${{ env.REGION }} \
                  --quiet; then
                  echo "✅ Successfully deleted: ${revision}"
                else
                  echo "❌ Failed to delete: ${revision} (continuing...)"
                fi
              fi
            done
          
          echo "🧹 Cleanup completed"
        if: needs.deploy.result == 'success' || needs.deploy-fast.result == 'success'

      - name: 'Deployment Summary'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentType = '${{ needs.deploy-fast.result }}' === 'success' ? 'Fast-Track' : 'Full Pipeline';
            const deploymentStatus = ('${{ needs.deploy.result }}' === 'success' || '${{ needs.deploy-fast.result }}' === 'success') ? '✅ Successful' : '❌ Failed';
            const healthStatus = '${{ needs.health-check.result }}' === 'success' ? '✅ Healthy' : '❌ Unhealthy';
            const trafficStatus = '${{ needs.traffic-migration.result }}' === 'success' ? '✅ Completed' : '❌ Failed';
            
            const serviceUrl = '${{ needs.deploy-fast.result }}' === 'success' ? '${{ needs.deploy-fast.outputs.service-url }}' : '${{ needs.deploy.outputs.service-url }}';
            const revision = '${{ needs.deploy-fast.result }}' === 'success' ? '${{ needs.deploy-fast.outputs.revision }}' : '${{ needs.deploy.outputs.revision }}';
            
            const summary = `## 🚀 Deployment Summary
            
            **Environment**: ${{ needs.validate.outputs.environment }}
            **Deployment Type**: ${deploymentType}
            **Version**: ${{ needs.validate.outputs.version }}
            **Service URL**: ${serviceUrl}
            
            ### Status
            - **Deployment**: ${deploymentStatus}
            - **Health Checks**: ${healthStatus}
            - **Traffic Migration**: ${trafficStatus}
            
            ### Details
            - **Revision**: ${revision}
            - **Strategy**: ${{ needs.detect-changes.outputs.fast-track == 'true' && 'Content-only changes detected' || 'Code changes detected' }}
            - **Commit**: ${context.sha.substring(0, 7)}
            
            ---
            *Automated deployment completed at ${new Date().toISOString()}*
            `;
            
            console.log(summary);

  # Job 7: Rollback on failure
  rollback:
    name: 'Emergency Rollback'
    runs-on: ubuntu-latest
    if: failure() && needs.deploy.result == 'success'
    needs: [validate, deploy, health-check, traffic-migration]

    steps:
      - name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 'Setup Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Rollback to Previous Revision'
        run: |
          echo "🔄 Initiating emergency rollback..."
          
          # Get the previous stable revision
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(metadata.name)" \
            --filter="status.conditions.type=Ready AND status.conditions.status=True" \
            --sort-by="~metadata.creationTimestamp" \
            --limit=2 | tail -n 1)
          
          if [ -n "${PREVIOUS_REVISION}" ]; then
            echo "Rolling back to revision: ${PREVIOUS_REVISION}"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions="${PREVIOUS_REVISION}=100"
            echo "✅ Rollback completed"
          else
            echo "❌ No previous revision found for rollback"
            exit 1
          fi

      - name: 'Verify Rollback'
        run: |
          sleep 30
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          if curl -sSf "${SERVICE_URL}/api/health" > /dev/null; then
            echo "✅ Rollback verification successful"
          else
            echo "❌ Rollback verification failed"
            exit 1
          fi